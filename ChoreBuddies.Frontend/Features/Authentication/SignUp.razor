@page "/signup"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using Shared.Authentication

@inject IAuthApiService authApiService
@inject NavigationManager navigationManager

<AuthorizeView>
    <Authorized>
        @{
            navigationManager.NavigateTo("/");
        }
    </Authorized>
</AuthorizeView>

<MudContainer Style="justify-content: center" MaxWidth="MaxWidth.Small">

    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Secondary" style="margin-bottom:16px">Signup</MudText>
        <MudForm @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField @ref="usernameField" T="string" Label="Username" Required="true" RequiredError="User name is required!" Style="margin-bottom:8px" />
            <MudTextField @ref="emailField" T="string" Label="Email" Required="true" RequiredError="Email is required!"
                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" Style="margin-bottom:8px" />
            <MudTextField @ref="passwordField" T="string" Label="Password" HelperText="Choose a strong password" InputType="InputType.Password"
                           Required="true"
                          Style="margin-bottom:8px" RequiredError="Password is required!" />@* Validation="@(new Func<string, IEnumerable<string>>(validationService.PasswordStrength))" *@
            <MudTextField T="string"
                Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                          Style="margin-bottom:8px" /> @* Validation="@(new Func<string, string>(PasswordMatch))" *@
        </MudForm>
        <div class="d-flex align-center justify-space-between">
            <MudCheckBox Color="Color.Primary" T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
            <button disabled="@(!success)" Class="btn btn-primary" onclick="@SignUpAction" style="padding-left: 25px; padding-right: 25px">  Sign up  </button>
        </div>
    </MudPaper>
</MudContainer>

@if (_showAlert)
{
    <MudCard Class="centered-top rounded-xl">
        <MudAlert Class="rounded-xl" Severity="Severity.Error" ShowCloseIcon="true"
        CloseIconClicked="(() => CloseAlert(true))">@_alertText</MudAlert>
    </MudCard>
}

@code {
    bool success;
    string[] errors = { };
    MudTextField<string>? usernameField;
    MudTextField<string>? emailField;
    MudTextField<string>? passwordField;

    private bool _showAlert = false;
    private string _alertText = "";

    private string PasswordMatch(string arg)
    {
        if (passwordField?.Value != arg)
            return "Passwords don't match";
        return String.Empty;
    }

    private async Task SignUpAction()
    {
        if (usernameField is null || emailField is null ||
            passwordField is null ) 
            return;

        var username = usernameField.Value ?? "";
        var email = emailField.Value ?? "";
        var password = passwordField.Value ?? "";

        var result = await authApiService.SignupAsync(new RegisterRequestDto(email, password, username));

        if (!result.Succeeded)
        {
            await ShowAlert("Registration failed!", 5000);
            return;
        }

        navigationManager.NavigateTo("/");
        StateHasChanged();
    }

    public async Task ShowAlert(string text, int delay)
    {
        _alertText = text;
        _showAlert = true;
        StateHasChanged();
        await Task.Delay(delay);
        CloseAlert(true);
        await InvokeAsync(StateHasChanged);
    }

    private void CloseAlert(bool value)
    {
        _showAlert = !value;
    }
}
